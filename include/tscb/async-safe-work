/* -*- C++ -*-
 * (c) 2010 Helge Bahmann <hcb@chaoticmind.net>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 2.1.
 * Refer to the file_event "COPYING" for details.
 */

#ifndef TSCB_ASYNC_SAFE_WORK_H
#define TSCB_ASYNC_SAFE_WORK_H

/**
	\page async_safe_work_descr Async-safe triggered work interface
	
*/

#include <list>

#include <tscb/eventflag>
#include <tscb/signal>

namespace tscb {
	
	class async_safe_callback;
	class async_safe_connection;
	class async_safe_work_service;
	class async_safe_work_dispatcher;
	
	class async_safe_callback : public abstract_callback {
	public:
		virtual
		~async_safe_callback(void) noexcept;
		
		virtual void
		disconnect(void) noexcept;
		
		virtual bool
		connected(void) const noexcept;
		
		inline void
		trigger(void) noexcept;
	
	protected:
		inline async_safe_callback(std::function<void(void)> function, async_safe_work_dispatcher * service)
			: function_(std::move(function))
			, activation_flag_(false)
			, pending_next_(nullptr)
			, prev_(nullptr)
			, next_(nullptr)
			, service_(service)
			, disconnected_(false)
		{}
		
		inline void
		trigger_bottom(void) noexcept;
	
		std::function<void(void)> function_;
		
		std::atomic_flag activation_flag_;
		async_safe_callback * pending_next_;
		async_safe_callback * prev_, * next_;
		async_safe_work_dispatcher * service_;
		
		enum state_type {
			state_connected,
			state_disconnect_async,
			state_disconnected
		};
		
		bool disconnected_;
		
		/** \internal \brief Serialize deregistration */
		std::mutex registration_mutex_;
		
		friend class async_safe_work_dispatcher;
		friend class async_pending_dequeue_helper;
	};
	
	/**
		\brief Connection between signal and receiver
		
		Every other connection implemented in this library can be
		downcast to this type.
	*/
	class async_safe_connection : public eventtrigger {
	public:
		virtual ~async_safe_connection(void) noexcept;
		
		inline async_safe_connection() noexcept : callback_(nullptr) {}
		
		inline async_safe_connection(async_safe_callback * callback = nullptr, bool add_ref = true) noexcept
			: callback_(callback)
		{
			if (callback_ && add_ref) {
				callback_->pin();
			}
		}
		
		inline async_safe_connection(const async_safe_connection & other) noexcept
			: callback_(other.callback_)
		{
			if (callback_) {
				callback_->pin();
			}
		}
		
		inline async_safe_connection(async_safe_connection && other) noexcept
			: callback_(other.callback_)
		{
			other.callback_ = nullptr;
		}
		
		inline const async_safe_connection & operator=(const async_safe_connection & other) noexcept
		{
			if (callback_) {
				callback_->release();
			}
			callback_ = other.callback_;
			if (callback_) {
				callback_->pin();
			}
			return *this;
		}
		
		inline const async_safe_connection & operator=(async_safe_callback * callback) noexcept
		{
			if (callback_) {
				callback_->release();
			}
			callback_ = callback;
			if (callback_) {
				callback_->pin();
			}
			return *this;
		}
		
		inline const async_safe_connection & operator=(async_safe_connection && other) noexcept
		{
			if (callback_) {
				callback_->release();
			}
			callback_ = other.callback_;
			other.callback_ = nullptr;
			return *this;
		}
		
		template<typename ConnectionType>
		inline const async_safe_connection & operator=(ConnectionType && other) noexcept
		{
			if (callback_) {
				callback_->release();
			}
			callback_ = other.callback;
			other.callback_ = nullptr;
			return *this;
		}
		
		inline void disconnect(void) noexcept
		{
			if (callback_) {
				callback_->disconnect();
				callback_->release();
				callback_ = nullptr;
			}
		}
		
		inline bool connected(void) const noexcept
		{
			return callback_ && callback_->connected();
		}
		
		inline operator connection (void) const noexcept {
			return connection(callback_, true);
		}
		
		inline void set(void) noexcept
		{
			callback_->trigger();
		}
		
		inline async_safe_callback * get(void) const noexcept
		{
			return callback_;
		}
		
	private:
		friend class connection;

		async_safe_callback * callback_;
	};
	
	/**
		\brief Async-triggered procedures interface
		
		Represents a registration interface for procedures that can be
		triggered in an async-safe way.
	*/
	class async_safe_work_service {
	public:
		virtual ~async_safe_work_service(void) noexcept;
		
		/**
			\brief Register async-safe triggered work procedure
			
			\param function The procedure to be called
			\returns Connection object
			
			Registers a procedure and associates it with an eventflag.
			When the eventflag is set, the designated procedure will
			eventually be called at least once. The eventflag can
			safely be triggered from signal handler context.
		*/
		virtual async_safe_connection
		async_procedure(std::function<void(void)> function) = 0;
	};
	
	/**
		\brief Stand-alone dispatcher for async-triggered procedures
	*/
	class async_safe_work_dispatcher : public async_safe_work_service {
	public:
		async_safe_work_dispatcher(eventtrigger & trigger);
		
		virtual ~async_safe_work_dispatcher(void) noexcept;
		
		virtual async_safe_connection
		async_procedure(std::function<void(void)> function);
		
		/**
			\brief Dispatch pending events
			\return
				Number of pending async procedures processed
		*/
		virtual size_t
		dispatch(void);
		
	protected:
		/** \internal \brief Singly-linked list of pending async procedures */
		std::atomic<async_safe_callback *> pending_;
		
		/** \internal \brief Count of procs to be cancelled asynchronously */
		std::atomic<size_t> async_cancel_count_;
		
		/** \internal \brief Doubly-linked list of available async procedures */
		async_safe_callback * first_;
		async_safe_callback * last_;
		
		std::mutex list_mutex_;
		
		eventtrigger & trigger_;
		
		friend class async_safe_callback;
	};
	
	inline void
	async_safe_callback::trigger(void) noexcept
	{
		/* if triggered already, do nothing */
		if (activation_flag_.test_and_set(std::memory_order_acquire)) {
			return;
		}
		
		trigger_bottom();
	}
	
	inline void
	async_safe_callback::trigger_bottom(void) noexcept
	{
		async_safe_callback * tmp = service_->pending_.load(std::memory_order_relaxed);
		do {
			pending_next_ = tmp;
		} while (!service_->pending_.compare_exchange_weak(tmp, this, std::memory_order_release, std::memory_order_relaxed));
		/* small(ish) problem: trigger might race with final clean-up */
		service_->trigger_.set();
	}
	
};

#endif
