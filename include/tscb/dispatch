/* -*- C++ -*-
 * (c) 2006 Helge Bahmann <hcb@chaoticmind.net>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License version 2.1.
 * Refer to the file_event "COPYING" for details.
 */

#ifndef __TSCB_DISPATCH_H
#define __TSCB_DISPATCH_H

#include <tscb/timer>
#include <tscb/ioready>

/**
	\page dispatcher_descr Compound event dispatching
	
	The various event dispatching mechanisms
	(\ref tscb::generic_timerqueue_dispatcher "timerqueue_dispatcher",
	\ref tscb::ioready_dispatcher "ioready_dispatcher") can
	be used stand-alone if the application so desires.
	
	However many applications require both timer and IO readiness
	callbacks, and the classes support this use. Specifically
	timer queues and io readiness can cooperate by using
	an \ref tscb::eventflag "eventflag" that is associated
	with an \ref tscb::ioready_dispatcher "ioready_dispatcher"
	(see for example \ref tscb::ioready_dispatcher::get_eventflag
	"ioready_dispatcher::get_eventflag"):
	
	\code
		tscb::ioready_dispatcher *io;
		...
		tscb::eventflag *flag=io->get_eventflag();
		tscb::timerqueue_dispatcher *tq;
		
		tq=new tscb::timerqueue_dispatcher(flag);
	\endcode
	
	
	This will enable the timer queue dispatcher to interrupt the
	IO readiness dispatcher in case new timers have been added.
	
	To handle both timer and io readiness events, the dispatching
	thread should call the individual dispatchers in the following
	way:
	
	\code
		tscb::ioready_dispatcher *io;
		tscb::timerqueue_dispatcher *timers;
		
		io=tscb::create_ioready_dispatcher();
		timers=new tscb::timerqueue_dispatcher(io->get_eventflag());
		
		// run the dispatcher loop
		while(true) {
			long long next_timer;
			long long now=tscb::current_time();
			bool timer_pending;
			do {
				next_timer=now;
				timer_pending=timers->run_queue(next_timer);
				if (!timer_pending) break;
				now=tscb::current_time();
			} while(now>=next_timer);
			
			if (timer_pending) {
				long long timeout=next_timer-now;
				io->dispatch(&timeout);
			} else
				io->dispatch(0);
		}
	\endcode
	
	The above code is implemented in the \ref tscb::dispatch "dispatch"
	global function, so a shorter equivalent of the above would
	be:
	
	\code
		tscb::ioready_dispatcher *io;
		tscb::timerqueue_dispatcher *timers;
		
		io=tscb::create_ioready_dispatcher();
		timers=new tscb::timerqueue_dispatcher(io->get_eventflag());
		
		// run the dispatcher loop
		while(true) {dispatch(timers, io);}
		
	\endcode
	
*/

namespace tscb {
	
	/**
		\brief Dispatch timer and/or io readiness events
		
		\param tq
			Events pending on this timer queue may be dispatched
		\param io
			Descriptors from this set will be watched for IO readiness
			and events dispatched to registered receivers
		
		Try to dispatch at least one timer event; wait until the next
		timer event is due, and try to dispatch at least one io
		readiness event during this time. Return after one io readiness
		event has been handled or the timeout has been reached.
		
		This function should be called in an endless loop from a
		dispatching thread; a call to this function will suspend the
		calling thread if there is no work to do.
		
		Sometimes it is necessarily to wake up the suspended thread
		prematurely; this can be accomplished in several different
		ways
		
		- register an ioready callback for a loopback connection
		(e.g. pipe); the function will return immediately if
		any ioready callbacks have been processed
		
		- set an event flag associated that the io readiness event
		dispatcher is associated with
	*/
	void dispatch(tscb::timerqueue_dispatcher *tq,
		tscb::ioready_dispatcher *io) throw();

};

#endif
